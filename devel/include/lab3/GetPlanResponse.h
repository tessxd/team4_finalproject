// Generated by gencpp from file lab3/GetPlanResponse.msg
// DO NOT EDIT!


#ifndef LAB3_MESSAGE_GETPLANRESPONSE_H
#define LAB3_MESSAGE_GETPLANRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lab3
{
template <class ContainerAllocator>
struct GetPlanResponse_
{
  typedef GetPlanResponse_<ContainerAllocator> Type;

  GetPlanResponse_()
    : plan()
    , success(false)  {
    }
  GetPlanResponse_(const ContainerAllocator& _alloc)
    : plan(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _plan_type;
  _plan_type plan;

   typedef uint8_t _success_type;
  _success_type success;




  typedef boost::shared_ptr< ::lab3::GetPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab3::GetPlanResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPlanResponse_

typedef ::lab3::GetPlanResponse_<std::allocator<void> > GetPlanResponse;

typedef boost::shared_ptr< ::lab3::GetPlanResponse > GetPlanResponsePtr;
typedef boost::shared_ptr< ::lab3::GetPlanResponse const> GetPlanResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab3::GetPlanResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab3::GetPlanResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lab3

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lab3::GetPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab3::GetPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab3::GetPlanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab3::GetPlanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab3::GetPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab3::GetPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab3::GetPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9784221dc1d1d3d7984c0a3039ee50fd";
  }

  static const char* value(const ::lab3::GetPlanResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9784221dc1d1d3d7ULL;
  static const uint64_t static_value2 = 0x984c0a3039ee50fdULL;
};

template<class ContainerAllocator>
struct DataType< ::lab3::GetPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab3/GetPlanResponse";
  }

  static const char* value(const ::lab3::GetPlanResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab3::GetPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] plan\n\
bool success\n\
\n\
";
  }

  static const char* value(const ::lab3::GetPlanResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab3::GetPlanResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPlanResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab3::GetPlanResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab3::GetPlanResponse_<ContainerAllocator>& v)
  {
    s << indent << "plan[]" << std::endl;
    for (size_t i = 0; i < v.plan.size(); ++i)
    {
      s << indent << "  plan[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.plan[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB3_MESSAGE_GETPLANRESPONSE_H
