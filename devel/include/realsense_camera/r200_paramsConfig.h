//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the realsense_camera package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __realsense_camera__R200_PARAMSCONFIG_H__
#define __realsense_camera__R200_PARAMSCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace realsense_camera
{
  class r200_paramsConfigStatics;
  
  class r200_paramsConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(r200_paramsConfig &config, const r200_paramsConfig &max, const r200_paramsConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const r200_paramsConfig &config1, const r200_paramsConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, r200_paramsConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const r200_paramsConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, r200_paramsConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const r200_paramsConfig &config) const = 0;
      virtual void getValue(const r200_paramsConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T r200_paramsConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (r200_paramsConfig::* field);

      virtual void clamp(r200_paramsConfig &config, const r200_paramsConfig &max, const r200_paramsConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const r200_paramsConfig &config1, const r200_paramsConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, r200_paramsConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const r200_paramsConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, r200_paramsConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const r200_paramsConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const r200_paramsConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, r200_paramsConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, r200_paramsConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<r200_paramsConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(r200_paramsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("enable_depth"==(*_i)->name){enable_depth = boost::any_cast<bool>(val);}
        if("color_backlight_compensation"==(*_i)->name){color_backlight_compensation = boost::any_cast<int>(val);}
        if("color_brightness"==(*_i)->name){color_brightness = boost::any_cast<int>(val);}
        if("color_contrast"==(*_i)->name){color_contrast = boost::any_cast<int>(val);}
        if("color_gain"==(*_i)->name){color_gain = boost::any_cast<int>(val);}
        if("color_gamma"==(*_i)->name){color_gamma = boost::any_cast<int>(val);}
        if("color_hue"==(*_i)->name){color_hue = boost::any_cast<int>(val);}
        if("color_saturation"==(*_i)->name){color_saturation = boost::any_cast<int>(val);}
        if("color_sharpness"==(*_i)->name){color_sharpness = boost::any_cast<int>(val);}
        if("color_white_balance"==(*_i)->name){color_white_balance = boost::any_cast<int>(val);}
        if("color_exposure"==(*_i)->name){color_exposure = boost::any_cast<int>(val);}
        if("r200_lr_gain"==(*_i)->name){r200_lr_gain = boost::any_cast<int>(val);}
        if("r200_lr_exposure"==(*_i)->name){r200_lr_exposure = boost::any_cast<int>(val);}
        if("color_enable_auto_white_balance"==(*_i)->name){color_enable_auto_white_balance = boost::any_cast<int>(val);}
        if("color_enable_auto_exposure"==(*_i)->name){color_enable_auto_exposure = boost::any_cast<int>(val);}
        if("r200_lr_auto_exposure_enabled"==(*_i)->name){r200_lr_auto_exposure_enabled = boost::any_cast<int>(val);}
        if("r200_auto_exposure_top_edge"==(*_i)->name){r200_auto_exposure_top_edge = boost::any_cast<int>(val);}
        if("r200_auto_exposure_bottom_edge"==(*_i)->name){r200_auto_exposure_bottom_edge = boost::any_cast<int>(val);}
        if("r200_auto_exposure_left_edge"==(*_i)->name){r200_auto_exposure_left_edge = boost::any_cast<int>(val);}
        if("r200_auto_exposure_right_edge"==(*_i)->name){r200_auto_exposure_right_edge = boost::any_cast<int>(val);}
        if("r200_emitter_enabled"==(*_i)->name){r200_emitter_enabled = boost::any_cast<int>(val);}
      }
    }

    bool enable_depth;
int color_backlight_compensation;
int color_brightness;
int color_contrast;
int color_gain;
int color_gamma;
int color_hue;
int color_saturation;
int color_sharpness;
int color_white_balance;
int color_exposure;
int r200_lr_gain;
int r200_lr_exposure;
int color_enable_auto_white_balance;
int color_enable_auto_exposure;
int r200_lr_auto_exposure_enabled;
int r200_auto_exposure_top_edge;
int r200_auto_exposure_bottom_edge;
int r200_auto_exposure_left_edge;
int r200_auto_exposure_right_edge;
int r200_emitter_enabled;

    bool state;
    std::string name;

    class R200_DEPTH_CONTROL
{
  public:
    R200_DEPTH_CONTROL()
    {
      state = true;
      name = "R200_Depth_Control";
    }

    void setParams(r200_paramsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("r200_dc_preset"==(*_i)->name){r200_dc_preset = boost::any_cast<int>(val);}
        if("r200_dc_estimate_median_decrement"==(*_i)->name){r200_dc_estimate_median_decrement = boost::any_cast<int>(val);}
        if("r200_dc_estimate_median_increment"==(*_i)->name){r200_dc_estimate_median_increment = boost::any_cast<int>(val);}
        if("r200_dc_median_threshold"==(*_i)->name){r200_dc_median_threshold = boost::any_cast<int>(val);}
        if("r200_dc_score_minimum_threshold"==(*_i)->name){r200_dc_score_minimum_threshold = boost::any_cast<int>(val);}
        if("r200_dc_score_maximum_threshold"==(*_i)->name){r200_dc_score_maximum_threshold = boost::any_cast<int>(val);}
        if("r200_dc_texture_count_threshold"==(*_i)->name){r200_dc_texture_count_threshold = boost::any_cast<int>(val);}
        if("r200_dc_texture_difference_threshold"==(*_i)->name){r200_dc_texture_difference_threshold = boost::any_cast<int>(val);}
        if("r200_dc_second_peak_threshold"==(*_i)->name){r200_dc_second_peak_threshold = boost::any_cast<int>(val);}
        if("r200_dc_neighbor_threshold"==(*_i)->name){r200_dc_neighbor_threshold = boost::any_cast<int>(val);}
        if("r200_dc_lr_threshold"==(*_i)->name){r200_dc_lr_threshold = boost::any_cast<int>(val);}
      }
    }

    int r200_dc_preset;
int r200_dc_estimate_median_decrement;
int r200_dc_estimate_median_increment;
int r200_dc_median_threshold;
int r200_dc_score_minimum_threshold;
int r200_dc_score_maximum_threshold;
int r200_dc_texture_count_threshold;
int r200_dc_texture_difference_threshold;
int r200_dc_second_peak_threshold;
int r200_dc_neighbor_threshold;
int r200_dc_lr_threshold;

    bool state;
    std::string name;

    
}r200_depth_control;

}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable_depth;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_backlight_compensation;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_brightness;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_contrast;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_gain;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_gamma;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_hue;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_saturation;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_sharpness;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_white_balance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_lr_gain;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_lr_exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_enable_auto_white_balance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_enable_auto_exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_lr_auto_exposure_enabled;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_auto_exposure_top_edge;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_auto_exposure_bottom_edge;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_auto_exposure_left_edge;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_auto_exposure_right_edge;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int r200_emitter_enabled;
//#line 56 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_preset;
//#line 58 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_estimate_median_decrement;
//#line 60 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_estimate_median_increment;
//#line 62 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_median_threshold;
//#line 64 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_score_minimum_threshold;
//#line 66 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_score_maximum_threshold;
//#line 68 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_texture_count_threshold;
//#line 70 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_texture_difference_threshold;
//#line 72 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_second_peak_threshold;
//#line 74 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_neighbor_threshold;
//#line 76 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      int r200_dc_lr_threshold;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("r200_paramsConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const r200_paramsConfig &__max__ = __getMax__();
      const r200_paramsConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const r200_paramsConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const r200_paramsConfig &__getDefault__();
    static const r200_paramsConfig &__getMax__();
    static const r200_paramsConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const r200_paramsConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void r200_paramsConfig::ParamDescription<std::string>::clamp(r200_paramsConfig &config, const r200_paramsConfig &max, const r200_paramsConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class r200_paramsConfigStatics
  {
    friend class r200_paramsConfig;
    
    r200_paramsConfigStatics()
    {
r200_paramsConfig::GroupDescription<r200_paramsConfig::DEFAULT, r200_paramsConfig> Default("Default", "", 0, 0, true, &r200_paramsConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable_depth = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable_depth = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable_depth = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<bool>("enable_depth", "bool", 0, "Enable Depth", "", &r200_paramsConfig::enable_depth)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<bool>("enable_depth", "bool", 0, "Enable Depth", "", &r200_paramsConfig::enable_depth)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_backlight_compensation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_backlight_compensation = 4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_backlight_compensation = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_backlight_compensation", "int", 0, "Backlight Compensation", "", &r200_paramsConfig::color_backlight_compensation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_backlight_compensation", "int", 0, "Backlight Compensation", "", &r200_paramsConfig::color_backlight_compensation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_brightness = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_brightness = 255;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_brightness = 56;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_brightness", "int", 0, "Brightness", "", &r200_paramsConfig::color_brightness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_brightness", "int", 0, "Brightness", "", &r200_paramsConfig::color_brightness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_contrast = 16;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_contrast = 64;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_contrast = 32;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_contrast", "int", 0, "Contrast", "", &r200_paramsConfig::color_contrast)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_contrast", "int", 0, "Contrast", "", &r200_paramsConfig::color_contrast)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_gain = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_gain = 256;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_gain = 32;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_gain", "int", 0, "Gain", "", &r200_paramsConfig::color_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_gain", "int", 0, "Gain", "", &r200_paramsConfig::color_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_gamma = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_gamma = 280;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_gamma = 220;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_gamma", "int", 0, "Gamma", "", &r200_paramsConfig::color_gamma)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_gamma", "int", 0, "Gamma", "", &r200_paramsConfig::color_gamma)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_hue = -2200;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_hue = 2200;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_hue = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_hue", "int", 0, "Hue", "", &r200_paramsConfig::color_hue)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_hue", "int", 0, "Hue", "", &r200_paramsConfig::color_hue)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_saturation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_saturation = 255;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_saturation = 128;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_saturation", "int", 0, "Saturation", "", &r200_paramsConfig::color_saturation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_saturation", "int", 0, "Saturation", "", &r200_paramsConfig::color_saturation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_sharpness = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_sharpness = 7;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_sharpness = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_sharpness", "int", 0, "Sharpness", "", &r200_paramsConfig::color_sharpness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_sharpness", "int", 0, "Sharpness", "", &r200_paramsConfig::color_sharpness)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_white_balance = 2000;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_white_balance = 8000;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_white_balance = 6500;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_white_balance", "int", 0, "White Balance", "", &r200_paramsConfig::color_white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_white_balance", "int", 0, "White Balance", "", &r200_paramsConfig::color_white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_exposure = 39;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_exposure = 10000;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_exposure = 156;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_exposure", "int", 0, "Exposure", "", &r200_paramsConfig::color_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_exposure", "int", 0, "Exposure", "", &r200_paramsConfig::color_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_lr_gain = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_lr_gain = 6399;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_lr_gain = 400;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_lr_gain", "int", 0, "LR Gain", "", &r200_paramsConfig::r200_lr_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_lr_gain", "int", 0, "LR Gain", "", &r200_paramsConfig::r200_lr_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_lr_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_lr_exposure = 164;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_lr_exposure = 164;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_lr_exposure", "int", 0, "LR Exposure", "", &r200_paramsConfig::r200_lr_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_lr_exposure", "int", 0, "LR Exposure", "", &r200_paramsConfig::r200_lr_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_enable_auto_white_balance = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_enable_auto_white_balance = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_enable_auto_white_balance = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_enable_auto_white_balance", "int", 0, "Enable Auto White Balance", "", &r200_paramsConfig::color_enable_auto_white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_enable_auto_white_balance", "int", 0, "Enable Auto White Balance", "", &r200_paramsConfig::color_enable_auto_white_balance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_enable_auto_exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_enable_auto_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_enable_auto_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_enable_auto_exposure", "int", 0, "Enable Auto Exposure", "", &r200_paramsConfig::color_enable_auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("color_enable_auto_exposure", "int", 0, "Enable Auto Exposure", "", &r200_paramsConfig::color_enable_auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_lr_auto_exposure_enabled = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_lr_auto_exposure_enabled = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_lr_auto_exposure_enabled = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_lr_auto_exposure_enabled", "int", 0, "Enable LR Auto Exposure", "", &r200_paramsConfig::r200_lr_auto_exposure_enabled)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_lr_auto_exposure_enabled", "int", 0, "Enable LR Auto Exposure", "", &r200_paramsConfig::r200_lr_auto_exposure_enabled)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_auto_exposure_top_edge = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_auto_exposure_top_edge = 479;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_auto_exposure_top_edge = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_top_edge", "int", 0, "Auto Exposure Top Edge", "", &r200_paramsConfig::r200_auto_exposure_top_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_top_edge", "int", 0, "Auto Exposure Top Edge", "", &r200_paramsConfig::r200_auto_exposure_top_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_auto_exposure_bottom_edge = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_auto_exposure_bottom_edge = 479;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_auto_exposure_bottom_edge = 479;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_bottom_edge", "int", 0, "Auto Exposure Bottom Edge", "", &r200_paramsConfig::r200_auto_exposure_bottom_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_bottom_edge", "int", 0, "Auto Exposure Bottom Edge", "", &r200_paramsConfig::r200_auto_exposure_bottom_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_auto_exposure_left_edge = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_auto_exposure_left_edge = 639;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_auto_exposure_left_edge = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_left_edge", "int", 0, "Auto Exposure Left Edge", "", &r200_paramsConfig::r200_auto_exposure_left_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_left_edge", "int", 0, "Auto Exposure Left Edge", "", &r200_paramsConfig::r200_auto_exposure_left_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_auto_exposure_right_edge = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_auto_exposure_right_edge = 639;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_auto_exposure_right_edge = 639;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_right_edge", "int", 0, "Auto Exposure Right Edge", "", &r200_paramsConfig::r200_auto_exposure_right_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_auto_exposure_right_edge", "int", 0, "Auto Exposure Right Edge", "", &r200_paramsConfig::r200_auto_exposure_right_edge)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.r200_emitter_enabled = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.r200_emitter_enabled = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.r200_emitter_enabled = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_emitter_enabled", "int", 0, "Emitter Enabled", "", &r200_paramsConfig::r200_emitter_enabled)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_emitter_enabled", "int", 0, "Emitter Enabled", "", &r200_paramsConfig::r200_emitter_enabled)));
r200_paramsConfig::GroupDescription<r200_paramsConfig::DEFAULT::R200_DEPTH_CONTROL, r200_paramsConfig::DEFAULT> R200_Depth_Control("R200_Depth_Control", "", 0, 1, true, &r200_paramsConfig::DEFAULT::r200_depth_control);
//#line 56 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_preset = -1;
//#line 56 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_preset = 5;
//#line 56 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_preset = 5;
//#line 56 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_preset", "int", 64, "R200 Depth Control Preset", "{'enum_description': 'Depth Control Preset Choices', 'enum': [{'srcline': 45, 'description': 'Individual Depth Control was changed', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': -1, 'ctype': 'int', 'type': 'int', 'name': 'UNUSED'}, {'srcline': 46, 'description': 'Default settings on chip. Similar to Medium. Best for Outdoors.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Default'}, {'srcline': 47, 'description': 'Disable almost all hardware-based outlier removal.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Off'}, {'srcline': 48, 'description': 'Lower number of outliers removed. Minimal false negatives.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Low'}, {'srcline': 49, 'description': 'Medium number of outliers removed. Balanced approach.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Medium'}, {'srcline': 50, 'description': 'Medium-High number of outliers removed. Derived optimization function.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Optimized'}, {'srcline': 51, 'description': 'Higher number of outliers removed. Minimal false positives.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'High'}]}", &r200_paramsConfig::r200_dc_preset)));
//#line 56 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_preset", "int", 64, "R200 Depth Control Preset", "{'enum_description': 'Depth Control Preset Choices', 'enum': [{'srcline': 45, 'description': 'Individual Depth Control was changed', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': -1, 'ctype': 'int', 'type': 'int', 'name': 'UNUSED'}, {'srcline': 46, 'description': 'Default settings on chip. Similar to Medium. Best for Outdoors.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Default'}, {'srcline': 47, 'description': 'Disable almost all hardware-based outlier removal.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Off'}, {'srcline': 48, 'description': 'Lower number of outliers removed. Minimal false negatives.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Low'}, {'srcline': 49, 'description': 'Medium number of outliers removed. Balanced approach.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Medium'}, {'srcline': 50, 'description': 'Medium-High number of outliers removed. Derived optimization function.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Optimized'}, {'srcline': 51, 'description': 'Higher number of outliers removed. Minimal false positives.', 'srcfile': '/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'High'}]}", &r200_paramsConfig::r200_dc_preset)));
//#line 58 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_estimate_median_decrement = 0;
//#line 58 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_estimate_median_decrement = 255;
//#line 58 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_estimate_median_decrement = 5;
//#line 58 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_estimate_median_decrement", "int", 32, "Estimate Median Decrement", "", &r200_paramsConfig::r200_dc_estimate_median_decrement)));
//#line 58 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_estimate_median_decrement", "int", 32, "Estimate Median Decrement", "", &r200_paramsConfig::r200_dc_estimate_median_decrement)));
//#line 60 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_estimate_median_increment = 0;
//#line 60 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_estimate_median_increment = 255;
//#line 60 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_estimate_median_increment = 5;
//#line 60 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_estimate_median_increment", "int", 32, "Estimate Median Increment", "", &r200_paramsConfig::r200_dc_estimate_median_increment)));
//#line 60 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_estimate_median_increment", "int", 32, "Estimate Median Increment", "", &r200_paramsConfig::r200_dc_estimate_median_increment)));
//#line 62 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_median_threshold = 0;
//#line 62 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_median_threshold = 1023;
//#line 62 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_median_threshold = 235;
//#line 62 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_median_threshold", "int", 32, "Median Threshold", "", &r200_paramsConfig::r200_dc_median_threshold)));
//#line 62 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_median_threshold", "int", 32, "Median Threshold", "", &r200_paramsConfig::r200_dc_median_threshold)));
//#line 64 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_score_minimum_threshold = 0;
//#line 64 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_score_minimum_threshold = 1023;
//#line 64 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_score_minimum_threshold = 27;
//#line 64 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_score_minimum_threshold", "int", 32, "Score Minimum Threshold", "", &r200_paramsConfig::r200_dc_score_minimum_threshold)));
//#line 64 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_score_minimum_threshold", "int", 32, "Score Minimum Threshold", "", &r200_paramsConfig::r200_dc_score_minimum_threshold)));
//#line 66 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_score_maximum_threshold = 0;
//#line 66 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_score_maximum_threshold = 1023;
//#line 66 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_score_maximum_threshold = 420;
//#line 66 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_score_maximum_threshold", "int", 32, "Score Maximum Threshold", "", &r200_paramsConfig::r200_dc_score_maximum_threshold)));
//#line 66 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_score_maximum_threshold", "int", 32, "Score Maximum Threshold", "", &r200_paramsConfig::r200_dc_score_maximum_threshold)));
//#line 68 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_texture_count_threshold = 0;
//#line 68 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_texture_count_threshold = 31;
//#line 68 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_texture_count_threshold = 8;
//#line 68 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_texture_count_threshold", "int", 32, "Texture Count Threshold", "", &r200_paramsConfig::r200_dc_texture_count_threshold)));
//#line 68 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_texture_count_threshold", "int", 32, "Texture Count Threshold", "", &r200_paramsConfig::r200_dc_texture_count_threshold)));
//#line 70 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_texture_difference_threshold = 0;
//#line 70 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_texture_difference_threshold = 1023;
//#line 70 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_texture_difference_threshold = 80;
//#line 70 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_texture_difference_threshold", "int", 32, "Texture Difference Threshold", "", &r200_paramsConfig::r200_dc_texture_difference_threshold)));
//#line 70 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_texture_difference_threshold", "int", 32, "Texture Difference Threshold", "", &r200_paramsConfig::r200_dc_texture_difference_threshold)));
//#line 72 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_second_peak_threshold = 0;
//#line 72 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_second_peak_threshold = 1023;
//#line 72 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_second_peak_threshold = 70;
//#line 72 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_second_peak_threshold", "int", 32, "Second Peak Threshold", "", &r200_paramsConfig::r200_dc_second_peak_threshold)));
//#line 72 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_second_peak_threshold", "int", 32, "Second Peak Threshold", "", &r200_paramsConfig::r200_dc_second_peak_threshold)));
//#line 74 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_neighbor_threshold = 0;
//#line 74 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_neighbor_threshold = 1023;
//#line 74 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_neighbor_threshold = 90;
//#line 74 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_neighbor_threshold", "int", 32, "Neighbor Threshold", "", &r200_paramsConfig::r200_dc_neighbor_threshold)));
//#line 74 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_neighbor_threshold", "int", 32, "Neighbor Threshold", "", &r200_paramsConfig::r200_dc_neighbor_threshold)));
//#line 76 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __min__.r200_dc_lr_threshold = 0;
//#line 76 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __max__.r200_dc_lr_threshold = 2047;
//#line 76 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __default__.r200_dc_lr_threshold = 12;
//#line 76 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      R200_Depth_Control.abstract_parameters.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_lr_threshold", "int", 32, "LR Threshold", "", &r200_paramsConfig::r200_dc_lr_threshold)));
//#line 76 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      __param_descriptions__.push_back(r200_paramsConfig::AbstractParamDescriptionConstPtr(new r200_paramsConfig::ParamDescription<int>("r200_dc_lr_threshold", "int", 32, "LR Threshold", "", &r200_paramsConfig::r200_dc_lr_threshold)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      R200_Depth_Control.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(r200_paramsConfig::AbstractGroupDescriptionConstPtr(new r200_paramsConfig::GroupDescription<r200_paramsConfig::DEFAULT::R200_DEPTH_CONTROL, r200_paramsConfig::DEFAULT>(R200_Depth_Control)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(r200_paramsConfig::AbstractGroupDescriptionConstPtr(new r200_paramsConfig::GroupDescription<r200_paramsConfig::DEFAULT::R200_DEPTH_CONTROL, r200_paramsConfig::DEFAULT>(R200_Depth_Control)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(r200_paramsConfig::AbstractGroupDescriptionConstPtr(new r200_paramsConfig::GroupDescription<r200_paramsConfig::DEFAULT, r200_paramsConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<r200_paramsConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<r200_paramsConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<r200_paramsConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    r200_paramsConfig __max__;
    r200_paramsConfig __min__;
    r200_paramsConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const r200_paramsConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static r200_paramsConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &r200_paramsConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const r200_paramsConfig &r200_paramsConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const r200_paramsConfig &r200_paramsConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const r200_paramsConfig &r200_paramsConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<r200_paramsConfig::AbstractParamDescriptionConstPtr> &r200_paramsConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<r200_paramsConfig::AbstractGroupDescriptionConstPtr> &r200_paramsConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const r200_paramsConfigStatics *r200_paramsConfig::__get_statics__()
  {
    const static r200_paramsConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = r200_paramsConfigStatics::get_instance();
    
    return statics;
  }

//#line 45 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_UNUSED = -1;
//#line 46 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_Default = 0;
//#line 47 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_Off = 1;
//#line 48 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_Low = 2;
//#line 49 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_Medium = 3;
//#line 50 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_Optimized = 4;
//#line 51 "/home/nvidia/catkin_ws/src/realsense/realsense_camera/cfg/r200_params.cfg"
      const int r200_params_High = 5;
}

#endif // __R200_PARAMSRECONFIGURATOR_H__
