// Generated by gencpp from file realsense_camera/GetIMUInfoResponse.msg
// DO NOT EDIT!


#ifndef REALSENSE_CAMERA_MESSAGE_GETIMUINFORESPONSE_H
#define REALSENSE_CAMERA_MESSAGE_GETIMUINFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realsense_camera/IMUInfo.h>
#include <realsense_camera/IMUInfo.h>

namespace realsense_camera
{
template <class ContainerAllocator>
struct GetIMUInfoResponse_
{
  typedef GetIMUInfoResponse_<ContainerAllocator> Type;

  GetIMUInfoResponse_()
    : accel()
    , gyro()  {
    }
  GetIMUInfoResponse_(const ContainerAllocator& _alloc)
    : accel(_alloc)
    , gyro(_alloc)  {
  (void)_alloc;
    }



   typedef  ::realsense_camera::IMUInfo_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::realsense_camera::IMUInfo_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;




  typedef boost::shared_ptr< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetIMUInfoResponse_

typedef ::realsense_camera::GetIMUInfoResponse_<std::allocator<void> > GetIMUInfoResponse;

typedef boost::shared_ptr< ::realsense_camera::GetIMUInfoResponse > GetIMUInfoResponsePtr;
typedef boost::shared_ptr< ::realsense_camera::GetIMUInfoResponse const> GetIMUInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_camera

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'realsense_camera': ['/home/nvidia/catkin_ws/src/realsense/realsense_camera/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcce7f85a63907f26a3912a7632e9630";
  }

  static const char* value(const ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcce7f85a63907f2ULL;
  static const uint64_t static_value2 = 0x6a3912a7632e9630ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_camera/GetIMUInfoResponse";
  }

  static const char* value(const ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IMUInfo accel\n\
IMUInfo gyro\n\
\n\
\n\
================================================================================\n\
MSG: realsense_camera/IMUInfo\n\
# header.frame_id is either set to \"imu_accel\" or \"imu_gyro\"\n\
# to distinguish between \"accel\" and \"gyro\" info.\n\
std_msgs/Header header\n\
float64[12] data\n\
float64[3] noise_variances\n\
float64[3] bias_variances\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.gyro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIMUInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_camera::GetIMUInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::realsense_camera::IMUInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::realsense_camera::IMUInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_CAMERA_MESSAGE_GETIMUINFORESPONSE_H
